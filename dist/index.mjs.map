{"version":3,"file":"index.mjs","sources":["../src/lib/constants.js","../src/lib/handle-value.js","../src/lib/parse-important-modifier.js","../src/lib/handle-pair-value.js","../src/index.js","../src/lib/parse-flexup-value.js"],"sourcesContent":["'use strict';\n\nexport default {\n  matchAlignValues: /^(_|(!?(center|start|end|between|around)))(\\/(_|(!?(center|start|end|between|around))))?$/,\n  matchWrapValues: /^!?(wrap|nowrap)$/,\n  matchDirValues: /^!?-?(row|col)$/,\n  matchGapValues: /^(_|(!?(\\d+[a-z]+)))(\\/(_|(!?(\\d+[a-z]+))))?$/,\n\n  valuesMapper: {\n    'start': 'flex-start',\n    'end': 'flex-end',\n    'center': 'center',\n    'between': 'space-between',\n    'around': 'space-around',\n    'wrap': 'wrap',\n    'nowrap': 'nowrap',\n    'row': 'row',\n    'col': 'col',\n    '-row': 'row-reverse',\n    '-col': 'column-reverse'\n  },\n\n  baseStyles: [\n    'display: flex;'\n  ]\n};\n","'use strict';\n\nimport constants from './constants';\nimport parseImportantModifier from './parse-important-modifier';\n\n/**\n * Handles the value of a CSS property, considering any important modifier and mapping values if necessary.\n *\n * @param {string} value - The value of the CSS property.\n * @param {string} key - The CSS property key.\n * @param {string[]} styles - An array containing CSS styles.\n * @param {boolean} [mapValues=true] - A flag indicating whether to map values using constants.valuesMapper. Default is true.\n * @returns {string[]} - An array containing CSS styles updated with the new property.\n */\nexport default function handleValue(value, key, styles, mapValues = true) {\n  const [isImportant, token] = parseImportantModifier(value);\n  const important = isImportant ? ' !important' : '';\n  const resultValue = mapValues ? constants.valuesMapper[token] : token;\n\n  styles.push(`${key}: ${resultValue}${important};`);\n\n  return styles;\n}\n","'use strict';\n\n/**\n * Parses a token to determine if it contains an !important modifier.\n * An important modifier is indicated by starting the token with '!'.\n *\n * @param {string} token - The token to parse.\n * @returns {[boolean, string]} - A tuple where the first element indicates\n * whether the token is an important modifier (true) or not (false), and the\n * second element is the token itself without the '!' character if present.\n */\nexport default function parseImportantModifier(token) {\n  if (token.startsWith('!'))\n    return [true, token.slice(1)];\n\n  return [false, token];\n}\n","'use strict';\n\nimport handleValue from './handle-value';\n\n/**\n * Handles the values of a pair of CSS properties, considering any important modifiers and mapping values if necessary.\n *\n * @param {string[]} values - An array containing the values of the CSS properties.\n * @param {string[]} keys - An array containing the keys of the CSS properties.\n * @param {string[]} styles - An array containing CSS styles.\n * @param {boolean} [mapValues=true] - A flag indicating whether to map values using constants.valuesMapper. Default is true.\n * @returns {string[]} - An array containing CSS styles updated with the new properties.\n */\nexport default function handlePairValue(values, keys, styles, mapValues = true) {\n  if (values.length == 1) {\n    styles = handleValue(values[0], keys[0], styles, mapValues);\n    styles = handleValue(values[0], keys[1], styles, mapValues);\n\n    return styles;\n  }\n\n  if (values[0] !== '_')\n    styles = handleValue(values[0], keys[0], styles, mapValues);\n\n  if (values[1] !== '_')\n    styles = handleValue(values[1], keys[1], styles, mapValues);\n\n  return styles;\n}\n","'use strict';\n\nimport parseFlexupValue from './lib/parse-flexup-value';\n\n/**\n * @returns {import('postcss').Plugin}\n */\nexport default function postcssFlexup() {\n  return {\n    postcssPlugin: 'postcss-flexup',\n    Declaration: {\n      flexup: (decl) => {\n        decl.parent.append(parseFlexupValue(decl.toString()));\n        decl.remove();\n      }\n    }\n  };\n}\n\npostcssFlexup.postcss = true;\n","'use strict';\n\nimport constants from './constants';\nimport handleValue from './handle-value';\nimport handlePairValue from './handle-pair-value';\n\n/**\n * Parses a flexbox-related declaration value and generates corresponding CSS styles.\n *\n * @param {string} declValue - The declaration value to parse.\n * @returns {string} - A string containing CSS styles generated from the parsed declaration value.\n */\nexport default function parseFlexupValue(declValue) {\n  let styles = [...constants.baseStyles];\n  const tokens = declValue.split(' ');\n\n  tokens.forEach(x => {\n    if (x == '_') {\n      // nothing-to-do\n      // TODO: Change regex so it doesn't include _ as a valid value\n\n    } else if (x.match(constants.matchAlignValues)) {\n      styles = handlePairValue(x.split('/'), ['justify-content', 'align-items'], styles, true);\n\n    } else if (x.match(constants.matchWrapValues)) {\n      styles = handleValue(x, 'flex-wrap', styles);\n\n    } else if (x.match(constants.matchDirValues)) {\n      styles = handleValue(x, 'flex-direction', styles);\n\n    } else if (x.match(constants.matchGapValues)) {\n      styles = handlePairValue(x.split('/'), ['column-gap', 'row-gap'], styles, false);\n    }\n  });\n\n  return '\\n' + styles.join('\\n');\n}\n"],"names":["constants","matchAlignValues","matchWrapValues","matchDirValues","matchGapValues","valuesMapper","start","end","center","between","around","wrap","nowrap","row","col","baseStyles","handleValue","value","key","styles","mapValues","isImportant","token","startsWith","slice","parseImportantModifier","important","resultValue","push","handlePairValue","values","keys","length","postcssFlexup","postcssPlugin","Declaration","flexup","decl","parent","append","declValue","split","forEach","x","match","join","parseFlexupValue","toString","remove","postcss"],"mappings":"AAEA,IAAeA,EAAA,CACbC,iBAAkB,4FAClBC,gBAAiB,oBACjBC,eAAgB,kBAChBC,eAAgB,gDAEhBC,aAAc,CACZC,MAAS,aACTC,IAAO,WACPC,OAAU,SACVC,QAAW,gBACXC,OAAU,eACVC,KAAQ,OACRC,OAAU,SACVC,IAAO,MACPC,IAAO,MACP,OAAQ,cACR,OAAQ,kBAGVC,WAAY,CACV,mBCTW,SAASC,EAAYC,EAAOC,EAAKC,EAAQC,GAAY,GAClE,MAAOC,EAAaC,GCJP,SAAgCA,GAC7C,OAAIA,EAAMC,WAAW,KACZ,EAAC,EAAMD,EAAME,MAAM,IAErB,EAAC,EAAOF,EACjB,CDD+BG,CAAuBR,GAC9CS,EAAYL,EAAc,cAAgB,GAC1CM,EAAcP,EAAYpB,EAAUK,aAAaiB,GAASA,EAIhE,OAFAH,EAAOS,KAAK,GAAGV,MAAQS,IAAcD,MAE9BP,CACT,CETe,SAASU,EAAgBC,EAAQC,EAAMZ,EAAQC,GAAY,GACxE,OAAqB,GAAjBU,EAAOE,QACTb,EAASH,EAAYc,EAAO,GAAIC,EAAK,GAAIZ,EAAQC,GACjDD,EAASH,EAAYc,EAAO,GAAIC,EAAK,GAAIZ,EAAQC,KAKjC,MAAdU,EAAO,KACTX,EAASH,EAAYc,EAAO,GAAIC,EAAK,GAAIZ,EAAQC,IAEjC,MAAdU,EAAO,KACTX,EAASH,EAAYc,EAAO,GAAIC,EAAK,GAAIZ,EAAQC,IAE5CD,EACT,CCrBe,SAASc,IACtB,MAAO,CACLC,cAAe,iBACfC,YAAa,CACXC,OAASC,IACPA,EAAKC,OAAOC,OCAL,SAA0BC,GACvC,IAAIrB,EAAS,IAAInB,EAAUe,YAsB3B,OArBeyB,EAAUC,MAAM,KAExBC,SAAQC,IACJ,KAALA,IAIOA,EAAEC,MAAM5C,EAAUC,kBAC3BkB,EAASU,EAAgBc,EAAEF,MAAM,KAAM,CAAC,kBAAmB,eAAgBtB,GAAQ,GAE1EwB,EAAEC,MAAM5C,EAAUE,iBAC3BiB,EAASH,EAAY2B,EAAG,YAAaxB,GAE5BwB,EAAEC,MAAM5C,EAAUG,gBAC3BgB,EAASH,EAAY2B,EAAG,iBAAkBxB,GAEjCwB,EAAEC,MAAM5C,EAAUI,kBAC3Be,EAASU,EAAgBc,EAAEF,MAAM,KAAM,CAAC,aAAc,WAAYtB,GAAQ,IAC3E,IAGI,KAAOA,EAAO0B,KAAK,KAC5B,CDxB2BC,CAAiBT,EAAKU,aACzCV,EAAKW,QAAQ,GAIrB,CAEAf,EAAcgB,SAAU"}