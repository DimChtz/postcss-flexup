{"version":3,"file":"index.cjs","sources":["../src/lib/constants.js","../src/lib/handlers.js","../src/lib/helpers.js","../src/index.js","../src/lib/parsers.js"],"sourcesContent":["'use strict';\n\nexport default {\n  matchAlignValues: /^(_|(!?(center|start|end|between|around)))(\\/(_|(!?(center|start|end|between|around))))?$/,\n  matchWrapValues: /^!?(wrap|nowrap)$/,\n  matchDirValues: /^!?-?(row|col)$/,\n  matchGapValues: /^(_|(!?(\\d+[a-z]+)))(\\/(_|(!?(\\d+[a-z]+))))?$/,\n\n  valuesMapper: {\n    'start': 'flex-start',\n    'end': 'flex-end',\n    'center': 'center',\n    'between': 'space-between',\n    'around': 'space-around',\n    'wrap': 'wrap',\n    'nowrap': 'nowrap',\n    'row': 'row',\n    'col': 'col',\n    '-row': 'row-reverse',\n    '-col': 'column-reverse'\n  },\n\n  baseStyles: [\n    'display: flex;'\n  ]\n};\n","'use strict';\n\nimport constants from './constants';\nimport { parseImportantModifier } from './helpers';\n\n/**\n * Handles the value of a CSS property, considering any important modifier and mapping values if necessary.\n *\n * @param {string} value - The value of the CSS property.\n * @param {string} key - The CSS property key.\n * @param {string[]} styles - An array containing CSS styles.\n * @param {boolean} [mapValues=true] - A flag indicating whether to map values using constants.valuesMapper. Default is true.\n * @returns {string[]} - An array containing CSS styles updated with the new property.\n */\nexport const handleValue = (value, key, styles, mapValues = true) => {\n  const [isImportant, token] = parseImportantModifier(value);\n  const important = isImportant ? ' !important' : '';\n  const resultValue = mapValues ? constants.valuesMapper[token] : token;\n\n  styles.push(`${key}: ${resultValue}${important};`);\n\n  return styles;\n};\n\n/**\n * Handles the values of a pair of CSS properties, considering any important modifiers and mapping values if necessary.\n *\n * @param {string[]} values - An array containing the values of the CSS properties.\n * @param {string[]} keys - An array containing the keys of the CSS properties.\n * @param {string[]} styles - An array containing CSS styles.\n * @param {boolean} [mapValues=true] - A flag indicating whether to map values using constants.valuesMapper. Default is true.\n * @returns {string[]} - An array containing CSS styles updated with the new properties.\n */\nexport const handlePairValue = (values, keys, styles, mapValues = true) => {\n  if (values.length == 1) {\n    styles = handleValue(values[0], keys[0], styles, mapValues);\n    styles = handleValue(values[0], keys[1], styles, mapValues);\n\n    return styles;\n  }\n\n  if (values[0] !== '_')\n    styles = handleValue(values[0], keys[0], styles, mapValues);\n\n  if (values[1] !== '_')\n    styles = handleValue(values[1], keys[1], styles, mapValues);\n\n  return styles;\n};\n","'use strict';\n\n/**\n * Parses a token to determine if it contains an !important modifier.\n * An important modifier is indicated by starting the token with '!'.\n *\n * @param {string} token - The token to parse.\n * @returns {[boolean, string]} - A tuple where the first element indicates\n * whether the token is an important modifier (true) or not (false), and the\n * second element is the token itself without the '!' character if present.\n */\nexport const parseImportantModifier = (token) => {\n  if (token.startsWith('!'))\n    return [true, token.slice(1)];\n\n  return [false, token];\n};\n","'use strict';\n\nimport { parseFlexupValue } from './lib/parsers';\n\n/**\n * @returns {import('postcss').Plugin}\n */\nexport default function postcssFlexup() {\n  return {\n    postcssPlugin: 'postcss-flexup',\n    Declaration: {\n      flexup: (decl) => {\n        decl.parent.append(parseFlexupValue(decl.toString()));\n        decl.remove();\n      }\n    }\n  };\n}\n\npostcssFlexup.postcss = true;\n","'use strict';\n\nimport constants from './constants';\nimport { handleValue, handlePairValue } from './handlers';\n\n/**\n * Parses a flexbox-related declaration value and generates corresponding CSS styles.\n *\n * @param {string} declValue - The declaration value to parse.\n * @returns {string} - A string containing CSS styles generated from the parsed declaration value.\n */\nexport const parseFlexupValue = (declValue) => {\n  let styles = [...constants.baseStyles];\n  const tokens = declValue.split(' ');\n\n  tokens.forEach(x => {\n    if (x == '_') {\n      // nothing-to-do\n      // TODO: Change regex so it doesn't include _ as a valid value\n\n    } else if (x.match(constants.matchAlignValues)) {\n      styles = handlePairValue(x.split('/'), ['justify-content', 'align-items'], styles, true);\n\n    } else if (x.match(constants.matchWrapValues)) {\n      styles = handleValue(x, 'flex-wrap', styles);\n\n    } else if (x.match(constants.matchDirValues)) {\n      styles = handleValue(x, 'flex-direction', styles);\n\n    } else if (x.match(constants.matchGapValues)) {\n      styles = handlePairValue(x.split('/'), ['column-gap', 'row-gap'], styles, false);\n    }\n  });\n\n  return '\\n' + styles.join('\\n');\n};\n"],"names":["constants","matchAlignValues","matchWrapValues","matchDirValues","matchGapValues","valuesMapper","start","end","center","between","around","wrap","nowrap","row","col","baseStyles","handleValue","value","key","styles","mapValues","arguments","length","undefined","_parseImportantModifi","token","startsWith","slice","parseImportantModifier","_parseImportantModifi2","_slicedToArray","isImportant","important","resultValue","push","concat","handlePairValue","values","keys","postcssFlexup","postcssPlugin","Declaration","flexup","decl","declValue","parent","append","toString","_toConsumableArray","split","forEach","x","match","join","remove","postcss"],"mappings":"64CAEA,IAAeA,EAAA,CACbC,iBAAkB,4FAClBC,gBAAiB,oBACjBC,eAAgB,kBAChBC,eAAgB,gDAEhBC,aAAc,CACZC,MAAS,aACTC,IAAO,WACPC,OAAU,SACVC,QAAW,gBACXC,OAAU,eACVC,KAAQ,OACRC,OAAU,SACVC,IAAO,MACPC,IAAO,MACP,OAAQ,cACR,OAAQ,kBAGVC,WAAY,CACV,mBCTSC,EAAc,SAACC,EAAOC,EAAKC,GAA6B,IAArBC,IAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACvDG,ECJoC,SAACC,GACrC,OAAIA,EAAMC,WAAW,KACZ,EAAC,EAAMD,EAAME,MAAM,IAErB,EAAC,EAAOF,EACjB,CDD+BG,CAAuBX,GAAMY,EAAAC,EAAAN,EAAA,GAAnDO,EAAWF,EAAA,GAAEJ,EAAKI,EAAA,GACnBG,EAAYD,EAAc,cAAgB,GAC1CE,EAAcb,EAAYpB,EAAUK,aAAaoB,GAASA,EAIhE,OAFAN,EAAOe,KAAIC,GAAAA,OAAIjB,EAAG,MAAAiB,OAAKF,GAAWE,OAAGH,QAE9Bb,CACT,EAWaiB,EAAkB,SAACC,EAAQC,EAAMnB,GAA6B,IAArBC,IAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAC7D,OAAqB,GAAjBgB,EAAOf,QACTH,EAASH,EAAYqB,EAAO,GAAIC,EAAK,GAAInB,EAAQC,GACjDD,EAASH,EAAYqB,EAAO,GAAIC,EAAK,GAAInB,EAAQC,KAKjC,MAAdiB,EAAO,KACTlB,EAASH,EAAYqB,EAAO,GAAIC,EAAK,GAAInB,EAAQC,IAEjC,MAAdiB,EAAO,KACTlB,EAASH,EAAYqB,EAAO,GAAIC,EAAK,GAAInB,EAAQC,IAE5CD,EACT,EEzCe,SAASoB,IACtB,MAAO,CACLC,cAAe,iBACfC,YAAa,CACXC,OAAQ,SAACC,GCAiB,IAACC,EAC3BzB,EDAEwB,EAAKE,OAAOC,QCDaF,EDCWD,EAAKI,WCA3C5B,EAAM6B,EAAOhD,EAAUe,YACZ6B,EAAUK,MAAM,KAExBC,SAAQ,SAAAC,GACJ,KAALA,IAIOA,EAAEC,MAAMpD,EAAUC,kBAC3BkB,EAASiB,EAAgBe,EAAEF,MAAM,KAAM,CAAC,kBAAmB,eAAgB9B,GAAQ,GAE1EgC,EAAEC,MAAMpD,EAAUE,iBAC3BiB,EAASH,EAAYmC,EAAG,YAAahC,GAE5BgC,EAAEC,MAAMpD,EAAUG,gBAC3BgB,EAASH,EAAYmC,EAAG,iBAAkBhC,GAEjCgC,EAAEC,MAAMpD,EAAUI,kBAC3Be,EAASiB,EAAgBe,EAAEF,MAAM,KAAM,CAAC,aAAc,WAAY9B,GAAQ,IAE9E,IAEO,KAAOA,EAAOkC,KAAK,QDrBpBV,EAAKW,QACP,GAGN,CAEAf,EAAcgB,SAAU"}